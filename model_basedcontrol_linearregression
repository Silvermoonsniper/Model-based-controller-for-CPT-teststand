#linear regression visualization
def linear_visual(localcontroller_data,local_velocitydata,modelcoef_,modelintercept_):
#visualize local linear regression
            x = localcontroller_data
            
            fitted_vel = modelcoef_*x + modelintercept_
            plt.scatter(x, local_velocitydata)
    
            plt.plot(x, fitted_vel,color='green')
            plt.legend(['regression line','data'])
            plt.title('local linear regression')
            plt.xlabel('Stellwert_Ventil')
            plt.ylabel('Digital velocity')
            plt.show()  


# function to calculate desired distance at local time step

def desired_distance(vibration_frequency,vibration_amplitude, phase_delay, distance_data,localtimestep,control_startstep, datapoints,samplingfreq):
     
        desired_distanceprofile = []
        
        #desired distance data at each control step
        #local time point
        local_pointpre = control_startstep
        local_pointcur = control_startstep- localtimestep+1
     
        #penetration velocity (mm)
        penetration_vel = 20
        #digital value
        penetrationvel_dig = penetration_vel
        #physical movement between previous step and current step
        sinemove = vibration_amplitude*(np.sin(2*np.pi*vibration_frequency*datapoints*local_pointcur*(1/samplingfreq)))
                                        #-np.sin(2*np.pi*vibration_frequency*datapoints*local_pointpre*(1/samplingfreq) + phase_delay))
        #transform into digital value
        sinemove_digital = 1e-3*sinemove*np.array(65536/500)
        
        desired_distance = distance_data[control_startstep-1] + sinemove_digital
        #+ penetrationvel_dig*(local_pointcur-control_startstep)       # desired_distanceprofile.append(desired_distance)
       # print(sinemove_digital,distance_data[control_startstep-1])
        return desired_distance


def filtered_signal_distance(samplingfreq,filtered,real_distancedata):
    t = (1/samplingfreq)*np.linspace(0, len(filtered),len(filtered), False)  # 1 second
    
    plt.plot(t[10:len(filtered)], filtered[10:len(filtered)],color = 'r')
    diff = real_distancedata[1:len(filtered)]-filtered[1:len(filtered)]
    
    
    #plot raw noisy data
    plt.scatter(t[1:len(filtered)], real_distancedata[1:len(filtered)])
                                                       
    plt.legend(['filtered signal','raw signal'])
    plt.title('raw distance signal and filtered distance signal ')
    
    plt.xlabel('Time [seconds]')
    plt.tight_layout()
    plt.show()
    #plot difference
    plt.scatter(t[1:len(diff)], diff[1:len(diff)])
    plt.legend(['difference'])
    plt.show()
    
#perform linear regression on velocity and controller output data after compensating time shift.
def shiftedlinear_regressioncalc(shift_p, oldmodelcoef_, oldmodelintercept_,veocity_data, controlleroutput, local_timestep, regression_datasize):
    
                       
   
    #check if length of data for regression exceeds the length of current velocity and controller output dataset
    current_lendataset = np.min([len(veocity_data),len(controlleroutput)])
    if current_lendataset < regression_datasize:
        regression_datasize = current_lendataset -10
     #lcoal velocity and controller output data
    localcontroller_data = np.array(controlleroutput[len(controlleroutput) - regression_datasize-shift_p:len(controlleroutput)-shift_p])
    
    local_velocitydata = np.array(veocity_data[len(veocity_data) - regression_datasize::])        
    #select less data points with equal distance, but covers full cycle of sine
    numElems = 100
    idx_c = np.round(np.linspace(0, len(localcontroller_data) - 1, numElems)).astype(int)
    localcontroller_data = localcontroller_data[idx_c]
    local_velocitydata = local_velocitydata[idx_c]
    #perform local linear regression
    modelcoef_, modelintercept_ = estimate_coef(oldmodelcoef_, oldmodelintercept_,localcontroller_data,
                                                local_velocitydata)
    
    

    
        
    
    # return slope and intercept after linear regression
    return modelcoef_, modelintercept_,localcontroller_data,local_velocitydata    
    #function to calculate predicted distance at certain time step
def predicted_distance(pointsinterval,controlcycle_time,dist_MTSdata,local_timestep,veocity_data,controlleroutput, modelcoef_, modelintercept_,step_maximumcorrelation):
    #predicted distance at current time step is done as follows, when we get one new distance sensor measurement, we trace back
    #to past sensor measurement by L steps, L is number of datapoints which is equal to maximum correlation, then we calculate 
    # predict distance at current time step as distance data before L points plus the summation of estimated distance difference
    # for past L points using linear regression model
    distsum = 0
    for j in range(step_maximumcorrelation):
        distsum = distsum + (modelintercept_ + modelcoef_*controlcycle_time*controlleroutput[len(controlleroutput)-step_maximumcorrelation+j-1])/pointsinterval
        

    predicted_distance = dist_MTSdata[len(dist_MTSdata)-step_maximumcorrelation] +distsum
  
    return predicted_distance
#function to calculate predicted controller output at certain time step
def predicted_controller(pointsinterval,controlcycle_time,local_timestep,veocity_data,controlleroutput, modelcoef_, modelintercept_,step_maximumcorrelation):
    #predicted controller output at current time step is done as follows, when we get one new distance sensor measurement, we trace back
    #to past sensor measurement by L steps, L is number of datapoints which is equal to maximum correlation, then we calculate 
    # predict controller output at current time step as controller output data before L points plus the summation of estimated distance difference
    # for past L points using linear regression model
    distsum = 0
    for j in range(step_maximumcorrelation):
        
        distsum = distsum + (modelintercept_ + veocity_data[len(controlleroutput)-step_maximumcorrelation+j-1])/(modelcoef_*controlcycle_time*pointsinterval)
        

    predicted_controller = controlleroutput[len(controlleroutput)-step_maximumcorrelation] +distsum
   
    return predicted_controller

#function to simulate model-based controller continuously
#input args:
#         modelintercept_array: array to store estimated intercept
#         modelcoef_array: array to store estimated slope
#         step_maximumcorrelation: time step for maximum correlation
#         coff_arrayfinal:correlation array 
#         averagesize:window size for average filter
#         tranning_samplenumber: sample number for traning stage
#         sample_size: data size of sensor measurement for trainning
#         denoise_mode: mode for denoising method 
#         simulation_timestep: time step for simulation
#         datapoints_velocity: number of data points for calculate velocity deviation
#         oldmodelcoef_: estimated slope at last step
#         oldmodelintercept_: estimated intercept at last step
#         rawcontrol_data: raw controller output data
#         rawdistance_data: raw distance sensor data
#         datapoints: default to be 1
#         vibration_frequency: vibration frequency of desired sine movement trajectory of piston
#         vibration_amplitude: vibration amplitude of desired sine movement trajectory of piston
#         phase_delay: hase delay of desired sine movement trajectory of piston
#         samplingfreq: sampling frequency of distance sensor
#         pointsinterval: points interval to select smoothed distance measurement at different steps for velocity calculation
def LRmodel_based_controller(modelintercept_array,modelcoef_array,step_maximumcorrelation,coff_arrayfinal,averagesize,simulation_timestep,oldmodelcoef_, oldmodelintercept_,piston_mov_digital,controlcycle_time, denoise_mode,rawdistance_data,datapoints_velocity,distance_data, controlleroutput_data,localtimestep,control_startstep,
                           datapoints,vibration_frequency, vibration_amplitude, phase_delay,samplingfreq,pointsinterval,timedata):
    
    
    
    #denoising velocity data
    if denoise_mode == 'butterworth':
        
        filtersignal = butterworth_filter(filterorder, critical_freq, vibration_frequency, piston_mov_digital, samplingfreq)
    
    elif denoise_mode == 'average':
    
        filtersignal = piston_mov_digital
        #average_filter(averagesize,piston_mov_digital)
       #denoising for distance data
        filterdistance = distance_data
        #average_filter(averagesize,distance_data)
    
    #perform correlation for existing data 
    windowsize = localtimestep
    
    if localtimestep <= control_startstep +15 :
        time_step,coff_array,step_maximumcorrelation = pearsoncorrelation_curve(windowsize, filtersignal[0:localtimestep], controlleroutput_data[0:localtimestep])
        coff_arrayfinal.append(coff_array)
        #print(step_maximumcorrelation)
        
      
    #plot normlized controller output and velocity data
    if localtimestep == simulation_timestep-2:
        normalization(timedata,filtersignal[0:localtimestep], controlleroutput_data[0:localtimestep],averagesize,step_maximumcorrelation)
  #check for anomaly case
    
    
    
    if step_maximumcorrelation[0]  < 40:
            step_maximumcorrelation[0] = 40

    if localtimestep == control_startstep +5 :
        correlation_plot(time_step,coff_arrayfinal)
    
    shift_p = 340
    
    
    #calculate number of data points for 
    step_maximumcorrelation[0] = samplingfreq/vibration_frequency  
   
    #controller data should be multiplied with control cycle time
    newcontrolleroutput_data = controlleroutput_data
   
    modelcoef_, modelintercept_,localcontroller_data,local_velocitydata = linear_regressioncalc(oldmodelcoef_, oldmodelintercept_,filtersignal[0:len(filtersignal)-2], newcontrolleroutput_data[0:len(newcontrolleroutput_data)-2], localtimestep,int(step_maximumcorrelation[0]) )
    
   #do the regression for time shifted data
    
    newmodelcoef_, newmodelintercept_,newlocalcontroller_data,newlocal_velocitydata = shiftedlinear_regressioncalc(shift_p, oldmodelcoef_, oldmodelintercept_,filtersignal[0:len(filtersignal)-2], newcontrolleroutput_data[0:len(newcontrolleroutput_data)-2], localtimestep,int(step_maximumcorrelation[0]))
    
    
    #visualize linear regression
    if localtimestep == simulation_timestep-2000:
            linear_visual(localcontroller_data,local_velocitydata,modelcoef_,modelintercept_)
            linear_visual(newlocalcontroller_data,newlocal_velocitydata,newmodelcoef_,newmodelintercept_)
    # post processing towards estimated parameters, this step is to avoid spike-like behaviour of estimated controller output,
    # because estimated slope and intercept approaches to 0 at same time
    process_element = 1
    #newmodelcoef_, newmodelintercept_ = 0,0
   # if len(modelcoef_array) > process_element:
    #    for j in range(process_element):
     #       localsum_m = np.sum(modelcoef_array[len(modelcoef_array)-process_element-1:len(modelcoef_array)-1])
     #       localsum_b = np.sum(modelintercept_array[len(modelintercept_array)-process_element-1:len(modelintercept_array)-1])
     #        newmodelcoef_ += modelcoef_array[len(modelcoef_array)-j-1]**2/localsum_m
      #       newmodelintercept_ += modelintercept_array[len(modelintercept_array)-j-1]**2/localsum_b
    
    modelcoef_, modelintercept_ = newmodelcoef_, newmodelintercept_
    
    #plot correlation curve at one step
    if localtimestep == simulation_timestep-2:
        
        #plot filtered signal and velocity data
        filtered_signal_visulization(samplingfreq,filtersignal,piston_mov_digital)
        
        filtered_signal_distance(samplingfreq,filterdistance,distance_adc(rawdistance_data))
    
    
    
    
    #calculate predict distance, this is equal to measured distance plus velocity at previous step
    predicted_distancelocal = predicted_distance(pointsinterval,controlcycle_time,filterdistance,localtimestep,filtersignal,controlleroutput_data, modelcoef_, modelintercept_,int(step_maximumcorrelation[0]))
    
    #calculate desired distance at current step
    #for testing we use raw distance data at next step to be our desired distance  distance_data[localtimestep]
    
    desired_distancelocal =  distance_data[localtimestep]
    #desired_distance(vibration_frequency, vibration_amplitude, phase_delay, distance_data,localtimestep,control_startstep, datapoints,samplingfreq)   
    
    #calculate velocity deviation
    delta_s = desired_distancelocal - predicted_distancelocal
    vel_delta = delta_s / datapoints_velocity
   
   
    
    #calculate predict controller output
  #  if -0.035 < modelcoef_ < 0.035:
   #     controlleroutput = controlleroutput_data[len(controlleroutput_data)-2]
   # else:
          
    controlleroutput = ((vel_delta + filtersignal[len(filtersignal)-1-shift_p] - modelintercept_)/modelcoef_)

    #limit controller output range
    if (controlleroutput > 50000):
        controlleroutput = 50000
    if (controlleroutput < -50000):
        controlleroutput = -50000
    
    return predicted_distancelocal,desired_distancelocal,filtersignal,controlleroutput, modelcoef_, modelintercept_,step_maximumcorrelation

#try different approach to get reasonable velocity data
def vel_calc(pointsinterval, distance_data,controlleroutput):
    vel = []
    time = []
    compare_vel = []
    controlleroutputdata = []
    for i in range(len(distance_data)-pointsinterval):
        vel.append(distance_data[i+pointsinterval] - distance_data[i])
        time.append(i)
        if controlleroutput[i] != 8323072:
                controlleroutputdata.append(controlleroutput[i])
                compare_vel.append(distance_data[i+pointsinterval] - distance_data[i])
    return vel,time,controlleroutputdata,compare_vel
#model-based controller by using simple linear regression model between controller output and velocity data 
# input args:
#       denoise_mode: denoising method for velocity and distance data denoising
#       simulation_timestep: time step for simulation
#       datapoints_velocity: proportional strength for velocity deviation term, which we use to correct controller output, larger value means we concern more on deviation
#       rawcontrol_data: controller output data from experiment
#       rawdistance_data: distance sensor measurement from experiment
#       datapoints: number of data points in our extracted data
#       vibration_frequency: vibration frequency of desired cone movement
#       vibration_amplitude: vibration frquency of desired cone movement
#       phase_delay:phase delay of desired cone movement
#       samplingfreq: sampling frequency of sensor
def LRcontroller_simulator(tranning_samplenumber, sample_size,averagesize,denoise_mode,simulation_timestep,datapoints_velocity,rawcontrol_data,rawdistance_data, datapoints,vibration_frequency, vibration_amplitude, phase_delay,samplingfreq):
    # array for controller output at all time steps   rawcontrol_data[0]            
    controlleroutput = np.zeros(simulation_timestep)  
   # controlleroutput[0] = 33333
    controlleroutput[0] = rawcontrol_data[0]
    #initial distance sensor measurement
    distance_data = np.zeros(simulation_timestep) 
    distance_data[0] = rawdistance_data[0]
   # distance_data[0] = 33333
    #predict distance array and desired distance array
    predicted_distancelocalarray = np.zeros(simulation_timestep)
    desired_distancelocalarray = np.zeros(simulation_timestep)
    #velocity data
    piston_mov_digital = np.zeros(simulation_timestep)  
    piston_mov_digital[0] = 0
    #control cycle time is same as sampling interval
    controlcycle_time = 1
    #calculate start step of controller
    control_startstep = tranning_samplenumber + sample_size
    estimated_delta_d = np.zeros(simulation_timestep)
    estimated_delta_d[0] = rawdistance_data[0]
    #initialize the bias term
    bias = np.zeros(simulation_timestep)
    var = np.zeros(simulation_timestep)
    step_maximumcorrelation = 0
    pointsinterval = 1
    #denoising for distance data
    filterdistance_data = average_filter(averagesize,distance_adc(rawdistance_data))
    
#calculate velocity
    velocity,timedata,controlleroutputdata,compare_vel = vel_calc(pointsinterval, filterdistance_data,rawcontrol_data)
  
    #initial linear regression para
   
    oldmodelcoef_ = 0
    oldmodelintercept_ = 0
    modelcoef_array = []
    modelinter_array = []
    add_controloutput = 0
    time_offsetarray = []
    coff_arrayfinal = []
 
    for j in range(simulation_timestep-1): 
            #perform local model-based control 
            #each step, we get controller output and distance sensor measurement, then update for next step
            # attention : only use partial distance and controller output data, 
           
            
            #check if we start to control
            if j < control_startstep :
                #calculate digital velocity data at current step 
               # piston_mov = distance_adc(np.array(filterdistance_data[j+1+window_dist]))- distance_adc(np.array(filterdistance_data[j]))
                piston_mov_digital[j] = compare_vel[j+1]
                #store distance sensor measurement at current step
                distance_data[j+1] = filterdistance_data[j+1]
                #store controller output data at current step
                controlleroutput[j+1]  = controlleroutputdata[j+1]
                estimated_delta_d[j+1] = controlleroutputdata[j+1]
               
    
            else:
               #calculate digital velocity data at current step 
               # piston_mov = distance_adc(np.array(filterdistance_data[j+1+window_dist]))- distance_adc(np.array(filterdistance_data[j]))
                piston_mov_digital[j] = compare_vel[j+1]
              
               #store distance sensor measurement at current step
                distance_data[j+1] = filterdistance_data[j+1]
                 
                 #store controller output data at current step 
                controlleroutput[j+1] = controlleroutputdata[j+1]
                
                #controlleroutputval
               # start to control based on linear regression model
                predicted_distancelocal,desired_distancelocal,filtersignal,controlleroutputval, modelcoef_, modelintercept_,step_maximumcorrelation = LRmodel_based_controller(modelinter_array,modelcoef_array,step_maximumcorrelation,coff_arrayfinal,averagesize,simulation_timestep,oldmodelcoef_, oldmodelintercept_,piston_mov_digital[0:j],controlcycle_time, denoise_mode,rawdistance_data,datapoints_velocity,distance_data[0:j+1], controlleroutput[0:j+1], j,control_startstep,datapoints,vibration_frequency, vibration_amplitude, phase_delay,samplingfreq,pointsinterval,timedata)
                #controlleroutput[j+1] = controlleroutputval
                estimated_delta_d[j+1] = controlleroutputval 
                modelcoef_array.append(modelcoef_) 
                modelinter_array.append(modelintercept_)
            #append for time offset array
               
                time_offsetarray.append(int(step_maximumcorrelation[0])) 
              
           
                
            #store predicted distance and desired distance
                predicted_distancelocalarray[j+1] = predicted_distancelocal
                desired_distancelocalarray[j+1] = desired_distancelocal
                
                #store estimated controller output from linear regression model
                
                #plot controller output versus velocity data
                if j == simulation_timestep -2 :
                    plt.scatter(controlleroutputdata[averagesize:j],compare_vel[averagesize:j])
                    plt.xlabel('controller output')
                    plt.ylabel('velocity')
                    plt.legend(['velocity data'])
                    plt.show()
            
             
            
              
    #time step
    timedata = np.arange(j+1)
    n = len(timedata) -20 - control_startstep
    #control_startstep = int(samplingfreq/vibration_frequency)
    #print(control_startstep)
    #plot time step for maximum correlation
    plt.plot(timedata[0:len(time_offsetarray)], np.array(time_offsetarray)[0:len(time_offsetarray)] )    
    plt.legend(['time step'])
    plt.title('time step for maximum correlation at different algorithm iteration')
    plt.xlabel('iteration')
    plt.show()
    
     #plot predict real and desired distance profile
    control_startstep1 = control_startstep
    plt.plot(timedata[control_startstep1+2:control_startstep+n], distance_data[control_startstep1+2:control_startstep+n] )    
    plt.plot(timedata[control_startstep1+2:control_startstep+n], desired_distancelocalarray[control_startstep1+2:control_startstep+n] )
    plt.plot(timedata[control_startstep1+2:control_startstep+n], predicted_distancelocalarray[control_startstep1+2:control_startstep+n] )
    plt.legend(['real','desired','predicted'])
    plt.title('real and desired piston position')
    plt.xlabel('time step')
    plt.show()
    
    #plot controller output
    plt.plot(timedata[control_startstep+1:j+1], piston_mov_digital[control_startstep+1:j+1])
    plt.title('Velocity data')
    plt.xlabel('time step')
    plt.show()
    
    #plot estimated controller output versus real controller output
    plt.plot(timedata[control_startstep+1:control_startstep+n], estimated_delta_d[control_startstep+1:control_startstep+n])
    plt.plot(timedata[control_startstep+1:control_startstep+n], controlleroutputdata[control_startstep+1:control_startstep+n])
    plt.legend(['estiamted controller output','real controller output'])
    plt.show()
    #plot estimated slope at each step
    plt.plot(timedata[control_startstep+1:control_startstep+len(modelcoef_array)], modelcoef_array[1:len(modelcoef_array)])
    plt.legend(['estiamted slope m'])
    plt.show()
    #plot estimated intercept at each step
    plt.plot(timedata[control_startstep+1:control_startstep+len(modelcoef_array)], modelinter_array[1:len(modelcoef_array)])
    plt.legend(['estiamted intercept b'])
    plt.show()
    #plot backward shifted predicted distance versus desired distance profile
    plt.plot(timedata[control_startstep+1:control_startstep+n], desired_distancelocalarray[control_startstep+1:control_startstep+n] )
    plt.plot(timedata[control_startstep+1:control_startstep+n], distance_data[control_startstep+1-65:control_startstep+n-65] )
    plt.legend(['backward shifted desired distance','measured distance'])
    plt.show()
    
    #plot controller output and velocity data time series after normalization
   # max_c = np.max(rawcontrol_data)
   # max_P = np.max(piston_mov_digital)
   # plt.plot(timedata[control_startstep+1:control_startstep+n], rawcontrol_data[control_startstep+1:control_startstep+n]/max_c)
   # plt.plot(timedata[control_startstep+1:control_startstep+n], piston_mov_digital[control_startstep+1:control_startstep+n]/max_P)
   # plt.show()
    return controlleroutput,distance_data

#normalization processing
def normalization(timedata,compare_vel,controlleroutputdata,averagesize,step_maximumcorrelation):
    
    
    normalized_data = (compare_vel[averagesize:len(controlleroutputdata)]-np.min(compare_vel[averagesize:len(controlleroutputdata)]))/(np.max(compare_vel[averagesize:len(controlleroutputdata)])-np.min(compare_vel[averagesize:len(controlleroutputdata)]))
    normalized_controller = (controlleroutputdata[averagesize:len(controlleroutputdata)]-np.min(controlleroutputdata[averagesize:len(controlleroutputdata)]))/(np.max(controlleroutputdata[averagesize:len(controlleroutputdata)]-np.min(controlleroutputdata[averagesize:len(controlleroutputdata)])))
    

    #plot controller output and velocity data time series
    plt.plot(timedata[averagesize:len(controlleroutputdata)], (compare_vel[averagesize:len(controlleroutputdata)]-np.min(compare_vel[averagesize:len(controlleroutputdata)]))/(np.max(compare_vel[averagesize:len(controlleroutputdata)])-np.min(compare_vel[averagesize:len(controlleroutputdata)])))

    plt.plot(timedata[averagesize:len(controlleroutputdata)], (controlleroutputdata[averagesize:len(controlleroutputdata)]-np.min(controlleroutputdata[averagesize:len(controlleroutputdata)]))/(np.max(controlleroutputdata[averagesize:len(controlleroutputdata)]-np.min(controlleroutputdata[averagesize:len(controlleroutputdata)]))))
    #plot shifted controller output and velocity data time series
    #plt.plot(timedata[averagesize:len(controlleroutputdata)], (compare_vel[averagesize:len(controlleroutputdata)]-np.min(compare_vel[averagesize:len(controlleroutputdata)]))/(np.max(compare_vel[averagesize:len(controlleroutputdata)])-np.min(compare_vel[averagesize:len(controlleroutputdata)])))

    #plt.plot(timedata[averagesize:len(controlleroutputdata)], (controlleroutputdata[averagesize:len(controlleroutputdata)]-np.min(controlleroutputdata[averagesize:len(controlleroutputdata)]))/(np.max(controlleroutputdata[averagesize:len(controlleroutputdata)]-np.min(controlleroutputdata[averagesize:len(controlleroutputdata)]))))
    plt.legend(['normalized velocity data','normalized controller output data'])
    plt.show()
    
    return normalized_data,normalized_controller





if __name__ == '__main__':
      #data column name for CPT teststand experiment
    newdataname = ['SecondsLabview_ms','Counter_ticks','Force_N','DistanceInduktiv_mm','PorePressRegOut_Digits','SidePressRegOut_Digits','AxialPressRegOut_Digits','LVDT1_mm','LVDT2_mm','LVDT3_mm','PorePressure_kPa','SidePressure_kPa','AxialPressure_kPa',
               'PoreVolume_ml','SideVolume_ml','AxialVolume_ml','SollPore_Digits','SollSide_Digits','SollAxial_Digits','LVDTMAX_mm',
'SideAddtion_kPA','DistanceRegOut_Digits','ConeTipResistance','ConePorePressure_Digits','ValveIS_Digits','DistanceRegDelta_Digits','unnamed']


    
    datapath1 = r'C:\Users\zchen\Downloads\testingdata_10Hz.csv'  #experiment datapath
    
    clockcycle_adwinProII = 1e-9  # time for one clock cycle of Adwin ProII system, T12 processor 1ns  
    
    vibration_frequency = 5   #vibration frequency of vibratory piston, unit:Hz
    
    vibration_amplitude = 15   #vibration amplitude
    
    timedelay = 3.5E-3  #time delay for phase delay
    
    phase_delay = timedelay*2*np.pi*vibration_frequency
    
    samplingfreq = 5000  #sampling frequency of distance sensor, unit:Hz  
    
    position_upperlimit = 1.255   #upper limit of distance sensor, mm
    
    position_lowerlimit = 670.247    #lower limit of distance sensor, mm
    
    regression_datasize = 40  # initial number of datapoints used for regression 
    
    datapoints_velocity = 200 # number of datapoints to calculate velocity deviation
    
    regression_coff = [-0.0312312,24.672] #initial setting of linear regression coefficient 
    
    time_delay = 30  #initial time delay for controller model.
    
    regularization_coff = 0   #regularization coefficient for normal equation solution
    
    filterorder = 3   #order of butterworth filter
    
    critical_freq = 5  #critical frequency of butterworth filter
    
    averagesize = 320  # size of average window for denoising
    
    denoise_mode = 'average' # switch between buttterworth filter and average filter for denoising
    
    simulation_timestep = 5000   # simulation steps for model-based controller
    
    tranning_samplenumber = 1400 # traning number samples
    
    sample_size = 200  # data size for one data sample
    
    noise_std = 1  # noise standard deviation for distance data
    
    datanumber = 30460
    
    # flag to choose if we want to plot distance data
    plot_flag = 0
    
    # flag to choose if we want to plot velocity data
    plot_vel_flag = 0
    
    
    # Processdelay for each dataset (unit:s)
    Processdelay1 = 1/5000
 
    
    #number of datapoints for model-based control step
    datapoints1 = 1
  
    
    #time delay 
    timedelay1 = Processdelay1*datapoints1
  
    
    #obtain datasets and visualize based on our demand
    data1 = CPTmain_data_processing(plot_flag,datapath1,newdataname,datanumber)
   
    
    #start the controller
    controlleroutput_array, distance_data = LRcontroller_simulator(tranning_samplenumber,sample_size,averagesize,denoise_mode,simulation_timestep,datapoints_velocity,data1['DistanceRegOut_Digits'],data1['DistanceInduktiv_mm'], datapoints1,vibration_frequency, vibration_amplitude, phase_delay,samplingfreq)
    
